package lyc.compiler;

import java_cup.runtime.*;
import java.util.Stack;

class Parser;

parser code {:
    public static lyc.compiler.polaca.Polaca polaca = new lyc.compiler.polaca.Polaca();
    public static lyc.compiler.symbols.SymbolTable st = new lyc.compiler.symbols.SymbolTable();
    private Stack<Object> variables = new Stack<Object>();
    private Stack<String> pilaTipos = new Stack<>();
:};

// Terminals
terminal ID;
terminal CTE_ENTERA;
terminal CTE_FLOTANTE;
terminal CTE_CADENA;

//terminal String ID, CTE_CADENA;
//terminal Integer CTE_ENTERA;
//terminal Double CTE_FLOTANTE;

terminal OP_SUMA;
terminal OP_RESTA;
terminal OP_MULT;
terminal OP_DIV;
terminal OP_ASIG;
terminal OP_TIPO;
terminal COMP_MEN;
terminal COMP_MAY;

terminal COMA;
terminal PAR_ABRIR;
terminal PAR_CERRAR;
terminal LLAVE_ABRIR;
terminal LLAVE_CERRAR;

terminal IF;
terminal ELSE;
terminal WHILE;
terminal AND;
terminal OR;
terminal NOT;
terminal WRITE;
terminal READ;
terminal INIT;

terminal DT_FLOAT;
terminal DT_INT;
terminal DT_STRING;

terminal SLICE_AND_CONCAT;
terminal NEGATIVE_CALCULATION;

// Non Terminals
non terminal programa, lista_sentencia, sentencia;
non terminal asignacion, while, slice_and_concat, negative_calculation, declaracion, io;
non terminal if, if_sin_else, if_con_else, else_inicio; // if
non terminal lista_declaraciones, declaracion_simple, lista_variables, tipo_variable;
non terminal expresion, termino, factor, constante; // operaciones
non terminal condicion, condicion_simple, condicion_multiple;
non terminal lista_parametros_neg_calc, parametro_neg_calc; // negative_calculation
non terminal lectura, escritura; // io

non terminal verificar_declaracion;

// Start Symbol Definition
start with programa;

programa ::= declaracion
            | declaracion lista_sentencia;

lista_sentencia ::= lista_sentencia sentencia 
                    | sentencia;

sentencia ::= asignacion
            | if
            | while
            | io;

declaracion ::= INIT LLAVE_ABRIR lista_declaraciones LLAVE_CERRAR
                {: 
                    System.out.println("Bloque de declaracion de variables\n\n"); 
                :};

lista_declaraciones ::= declaracion_simple
                      | lista_declaraciones declaracion_simple;

declaracion_simple ::= lista_variables OP_TIPO tipo_variable
                        {: 
                            String tipo = pilaTipos.pop();
                            for (int i = 0; i < variables.size(); i++) {
                                st.declare(variables.get(i), tipo);
                            }
                            variables.clear(); 
                        :};

lista_variables ::= lista_variables COMA ID:id
                    {: 
                        variables.push(id); 
                        System.out.println("Declaracion anidada (,) " + id);
                    :}
                | ID:id
                    {: 
                        variables.push(id); 
                        System.out.println("Id: " + id);
                    :};

tipo_variable ::= DT_FLOAT
                    {: 
                        pilaTipos.push("Float");
                        System.out.println("Declaracion Float"); 
                    :}
                | DT_INT
                    {: 
                        pilaTipos.push("Int");
                        System.out.println("Declaracion Int"); 
                    :}
                | DT_STRING
                    {: 
                        pilaTipos.push("String");
                        System.out.println("Declaracion String"); 
                    :};

asignacion ::= verificar_declaracion:id OP_ASIG expresion
                {: 
                    String auxTipoDestino = st.getType(id);
                    /*                               
                    for (int i = 0; i < pilaTipos.size(); i++) {
                        System.out.println("Comparo el tipo izq: " + auxTipoDestino + ", con el tipo derecho: " + pilaTipos.pop());    
                    }
                    */
                    st.checkAssignmentType(pilaTipos, auxTipoDestino, id);
                    pilaTipos.clear();
                    polaca.insertarEnPolaca(id);
                    polaca.insertarEnPolaca(":=");
                    System.out.println("Id: '" + id + "' Asignacion \n"); 
                :}
            | verificar_declaracion:id OP_ASIG slice_and_concat
                {: 
                    polaca.insertarEnPolaca(id);
                    polaca.insertarEnPolaca(":=");
                    System.out.println("Id: '" + id + "' Asignacion \n"); 
                :}
            | verificar_declaracion:id OP_ASIG negative_calculation
                {: 
                    polaca.insertarEnPolaca(id);
                    polaca.insertarEnPolaca(":=");
                    System.out.println("Id: '" + id + "' Asignacion \n"); 
                :};

verificar_declaracion ::= ID:id {: st.checkDeclared(id); RESULT = id; :};

expresion ::= expresion OP_SUMA termino
              {: 
                polaca.insertarEnPolaca("+");
                System.out.println("Suma"); 
              :}
            | expresion OP_RESTA termino
                {: 
                    polaca.insertarEnPolaca("-");
                    System.out.println("Resta"); 
                :}
            | termino
                {: System.out.println("Expresion simple"); :};

termino ::= termino OP_MULT factor
             {: 
                polaca.insertarEnPolaca("*");
                System.out.println("Multiplicacion"); 
            :}
            | termino OP_DIV factor
                {: 
                    polaca.insertarEnPolaca("/");
                    System.out.println("Division"); 
                :}
            | factor
                {: System.out.println("Termino simple"); :};

factor ::= constante
            | ID:id
                {: 
                    st.checkDeclared(id);
                    pilaTipos.push(st.getType(id));
                    polaca.insertarEnPolaca(id);
                    System.out.println("Id: " + id); 
                :};

constante ::= CTE_ENTERA:entero
                {: 
                    pilaTipos.push("Int");
                    polaca.insertarEnPolaca(entero);
                    System.out.println("Cte entera: " + entero); 
                :}
            | CTE_FLOTANTE:flotante
                {: 
                    pilaTipos.push("Float");
                    polaca.insertarEnPolaca(flotante);
                    System.out.println("Cte flotante: " + flotante); 
                :}
            | CTE_CADENA:cadena
                {: 
                    pilaTipos.push("String");
                    polaca.insertarEnPolaca(cadena);
                    System.out.println("Cte cadena: " + cadena); 
                :};

io ::= lectura
    | escritura;

lectura ::= READ PAR_ABRIR verificar_declaracion:id PAR_CERRAR
                {: 
                    polaca.insertarEnPolaca(id);
                    polaca.insertarEnPolaca("READ");
                    System.out.println("Lectura de variable: " + id + "\n"); 
                :};

escritura ::= WRITE PAR_ABRIR CTE_CADENA:cadena PAR_CERRAR
                {: 
                    polaca.insertarEnPolaca(cadena);
                    polaca.insertarEnPolaca("WRITE");
                    System.out.println("Imprimir cadena: " + cadena); 
                :}
            | WRITE PAR_ABRIR verificar_declaracion:id PAR_CERRAR
                {: 
                    polaca.insertarEnPolaca(id);
                    polaca.insertarEnPolaca("WRITE");
                    System.out.println("Imprimir variable: " + id); 
                :};

if ::= if_con_else
     | if_sin_else;

if_sin_else ::= IF PAR_ABRIR condicion PAR_CERRAR LLAVE_ABRIR lista_sentencia LLAVE_CERRAR
                {: 
                    while (!polaca.pilaIf.isEmpty()) {
                        int posSalto = polaca.pilaIf.pop();
                        //System.out.println("Voy a insertar en la pos: " + posSalto); 
                        polaca.getElementos().set(posSalto, String.valueOf(polaca.getIndice()));
                    }

                    System.out.println("IF sin else \n"); 
                :};

if_con_else ::= IF PAR_ABRIR condicion PAR_CERRAR LLAVE_ABRIR lista_sentencia LLAVE_CERRAR ELSE else_inicio LLAVE_ABRIR lista_sentencia LLAVE_CERRAR
                {: 
                    if (!polaca.pilaIf.isEmpty()) {
                        int posSaltoFalso = polaca.pilaIf.pop();
                        polaca.getElementos().set(posSaltoFalso, String.valueOf(polaca.getIndice()));
                    }
                :};

else_inicio ::= 
    {: 
        polaca.insertarEnPolaca("BI");
        while (!polaca.pilaIf.isEmpty()) {
            int posSaltoFinal = polaca.pilaIf.pop();
            polaca.getElementos().set(posSaltoFinal, String.valueOf(polaca.getIndice()+1));
        }
        polaca.pilaIf.push(polaca.getIndice());
        polaca.insertarEnPolaca("SALTO"); // Avanzar
        System.out.println("IF con else \n"); 
    :};

while ::= WHILE PAR_ABRIR
            {:
                polaca.isWhile = true;
                polaca.pilaWhile.push(polaca.getIndice());
                polaca.insertarEnPolaca("WHILE");
            :}
          condicion PAR_CERRAR 
          LLAVE_ABRIR lista_sentencia LLAVE_CERRAR
            {: 
                polaca.insertarEnPolaca("BI");
                if (!polaca.pilaWhile.isEmpty()) {
                    int posSaltoFinal = polaca.pilaWhile.pop();
                    polaca.getElementos().set(posSaltoFinal, String.valueOf(polaca.getIndice()+1));
                }
                if (!polaca.pilaWhile.isEmpty()) {
                    int posSaltoInicio = polaca.pilaWhile.pop();
                    polaca.insertarEnPolaca(posSaltoInicio);
                    //System.out.println("Inserto la pos del inicio del while: " + posSaltoInicio); 
                }
                System.out.println("WHILE con condicion y bloque \n"); 
            :};

condicion ::= condicion_simple
                {: 
                    System.out.println("Condicion simple"); 
                :}
            | condicion_multiple;

condicion_simple ::= expresion COMP_MEN expresion
                    {: 
                        String tipo1 = pilaTipos.pop();
                        String tipo2 = pilaTipos.pop();
                        st.checkComparationType(tipo1, tipo2);
                        pilaTipos.clear();
                        //System.out.println("Condicion con 2 tipos: " + tipo1 + " y " + tipo2); 

                        polaca.insertarEnPolaca("CMP");

                        if (!polaca.isWhile) {
                            if (polaca.isOR) {
                                int posSaltoV = polaca.pilaIf.pop();
                                polaca.insertarEnPolaca("BGE");
                                //System.out.println("Voy a apilar: " + polaca.getIndice()); 
                                polaca.pilaIf.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO"); // Avanzar

                                //Si es or modifico el primer comparador y salto al V del if
                                polaca.getElementos().set(polaca.getIndice()-7, "BLT");   
                                polaca.getElementos().set(polaca.getIndice()-6, String.valueOf(polaca.getIndice()));                              
                                polaca.isOR = false;
                            } else {
                                polaca.insertarEnPolaca("BGE");        
                                //System.out.println("Voy a apilar: " + polaca.getIndice()); 
                                polaca.pilaIf.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO"); // Avanzar
                            }
                        } else {
                            polaca.insertarEnPolaca("BGE");        
                            //System.out.println("Voy a apilar: " + polaca.getIndice()); 
                            polaca.pilaWhile.push(polaca.getIndice());
                            polaca.insertarEnPolaca("SALTO"); // Avanzar
                            polaca.isWhile = false;
                        }

                        System.out.println("Operador <"); 
                    :}
                    | expresion COMP_MAY expresion
                    {: 
                        String tipo1 = pilaTipos.pop();
                        String tipo2 = pilaTipos.pop();
                        st.checkComparationType(tipo1, tipo2);
                        pilaTipos.clear();
                        //System.out.println("Condicion con 2 tipos: " + tipo1 + " y " + tipo2); 

                        polaca.insertarEnPolaca("CMP");

                        if (!polaca.isWhile) {
                            if (polaca.isOR) {
                                int posSaltoV = polaca.pilaIf.pop();
                                polaca.insertarEnPolaca("BLE");        
                                //System.out.println("Voy a apilar: " + polaca.getIndice()); 
                                polaca.pilaIf.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO"); // Avanzar

                                //Si es or modifico el primer comparador y salto al V del if
                                polaca.getElementos().set(polaca.getIndice()-7, "BGT");   
                                polaca.getElementos().set(polaca.getIndice()-6, String.valueOf(polaca.getIndice()));                              
                                polaca.isOR = false;
                            } else {
                                polaca.insertarEnPolaca("BLE");
                                //System.out.println("Voy a apilar: " + polaca.getIndice()); 
                                polaca.pilaIf.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO"); // Avanzar
                            }
                        } else {
                            polaca.insertarEnPolaca("BLE");
                            //System.out.println("Voy a apilar: " + polaca.getIndice()); 
                            polaca.pilaWhile.push(polaca.getIndice());
                            polaca.insertarEnPolaca("SALTO"); // Avanzar
                            polaca.isWhile = false;
                        }

                        System.out.println("Operador >"); 
                    :}
                    | NOT expresion COMP_MEN expresion
                    {: 
                        String tipo1 = pilaTipos.pop();
                        String tipo2 = pilaTipos.pop();
                        st.checkComparationType(tipo1, tipo2);
                        pilaTipos.clear();
                        //System.out.println("Condicion con 2 tipos: " + tipo1 + " y " + tipo2); 
                        
                        polaca.insertarEnPolaca("CMP");

                        if (!polaca.isWhile) {
                            if (polaca.isOR) {
                                int posSaltoV = polaca.pilaIf.pop();
                                polaca.insertarEnPolaca("BLT");        
                                //System.out.println("Voy a apilar: " + polaca.getIndice()); 
                                polaca.pilaIf.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO"); // Avanzar

                                //Si es or modifico el primer comparador y salto al V del if
                                polaca.getElementos().set(polaca.getIndice()-7, "BGE");   
                                polaca.getElementos().set(polaca.getIndice()-6, String.valueOf(polaca.getIndice()));                              
                                polaca.isOR = false;
                            } else {
                                polaca.insertarEnPolaca("BLT");
                                polaca.pilaIf.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO"); // Avanzar
                            }
                        } else {
                            polaca.insertarEnPolaca("BLT");
                            //System.out.println("Voy a apilar: " + polaca.getIndice()); 
                            polaca.pilaWhile.push(polaca.getIndice());
                            polaca.insertarEnPolaca("SALTO"); // Avanzar
                            polaca.isWhile = false;
                        }

                        System.out.println("Operador NOT <"); 
                    :}
                    | NOT expresion COMP_MAY expresion
                    {: 
                        String tipo1 = pilaTipos.pop();
                        String tipo2 = pilaTipos.pop();
                        st.checkComparationType(tipo1, tipo2);
                        pilaTipos.clear();
                        //System.out.println("Condicion con 2 tipos: " + tipo1 + " y " + tipo2); 

                        polaca.insertarEnPolaca("CMP");

                        if (!polaca.isWhile) {
                            if (polaca.isOR) {
                                int posSaltoV = polaca.pilaIf.pop();
                                polaca.insertarEnPolaca("BGT");        
                                //System.out.println("Voy a apilar: " + polaca.getIndice()); 
                                polaca.pilaIf.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO"); // Avanzar

                                //Si es or modifico el primer comparador y salto al V del if
                                polaca.getElementos().set(polaca.getIndice()-7, "BLE");   
                                polaca.getElementos().set(polaca.getIndice()-6, String.valueOf(polaca.getIndice()));                              
                                polaca.isOR = false;
                            } else {
                                polaca.insertarEnPolaca("BGT");
                                polaca.pilaIf.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO"); // Avanzar
                            }
                        } else {
                            polaca.insertarEnPolaca("BGT");
                            //System.out.println("Voy a apilar: " + polaca.getIndice()); 
                            polaca.pilaWhile.push(polaca.getIndice());
                            polaca.insertarEnPolaca("SALTO"); // Avanzar
                            polaca.isWhile = false;
                        }

                        System.out.println("Operador NOT >"); 
                    :};
                        
condicion_multiple ::= condicion_simple AND condicion_simple
                        {: 
                            System.out.println("Condicion con AND"); 
                        :}
                    | condicion_simple
                        {: 
                            polaca.isOR = true;
                        :}
                      OR condicion_simple
                        {: System.out.println("Condicion con OR"); :};

slice_and_concat ::= SLICE_AND_CONCAT PAR_ABRIR CTE_ENTERA:param1 COMA CTE_ENTERA:param2 COMA CTE_CADENA:param3 COMA CTE_CADENA:param4 COMA CTE_ENTERA:param5 PAR_CERRAR
                        {: 
                            String resultado = polaca.sliceAndConcat(
                                                        param1, 
                                                        param2, 
                                                        param3, 
                                                        param4, 
                                                        param5
                                                );
                            polaca.insertarEnPolaca(resultado);

                            System.out.println("\nLlamado a sliceAndConcat " + param1 + ", " + param2 + ", " + param3 + ", " + param4 + ", " + param5); 
                        :};

negative_calculation ::= NEGATIVE_CALCULATION PAR_ABRIR lista_parametros_neg_calc PAR_CERRAR
                            {: 
                                int posSaltoFalso = 0;
                                int posSaltoVerdadero = 0;

                                //polaca.insertarEnPolaca("**************************************");
                                // if contadorNegativos == 0 -> No hay negativos
                                polaca.insertarEnPolaca("@cont");
                                polaca.insertarEnPolaca("0");
                                polaca.insertarEnPolaca("CMP");
                                polaca.insertarEnPolaca("BNE");                       
                                polaca.pilaNeg.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO");
                                polaca.insertarEnPolaca("0.0");
                                polaca.insertarEnPolaca("@res");
                                polaca.insertarEnPolaca(":=");
                                polaca.insertarEnPolaca("BI");
                                polaca.pilaNegV.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO");

                                posSaltoFalso = polaca.pilaNeg.pop();
                                polaca.getElementos().set(posSaltoFalso, String.valueOf(polaca.getIndice()));

                                // if contadorNegativos % 2 == 0 -> PAR
                                polaca.insertarEnPolaca("@cont");
                                polaca.insertarEnPolaca("2");
                                polaca.insertarEnPolaca("%");
                                polaca.insertarEnPolaca("0");
                                polaca.insertarEnPolaca("CMP");
                                polaca.insertarEnPolaca("BNE");                       
                                polaca.pilaNeg.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO");
                                polaca.insertarEnPolaca("@suma");
                                polaca.insertarEnPolaca("@res");
                                polaca.insertarEnPolaca(":=");
                                polaca.insertarEnPolaca("BI");
                                polaca.pilaNegV.push(polaca.getIndice());
                                polaca.insertarEnPolaca("SALTO");

                                posSaltoFalso = polaca.pilaNeg.pop();
                                polaca.getElementos().set(posSaltoFalso, String.valueOf(polaca.getIndice()));
                                
                                // IMPAR
                                polaca.insertarEnPolaca("@prod");
                                polaca.insertarEnPolaca("@res");
                                polaca.insertarEnPolaca(":=");                        

                                while (!polaca.pilaNegV.isEmpty()) {
                                    posSaltoVerdadero = polaca.pilaNegV.pop();
                                    polaca.getElementos().set(posSaltoVerdadero, String.valueOf(polaca.getIndice()));
                                }
                                polaca.insertarEnPolaca("@res");
                                System.out.println("Llamado a negativeCalculation con params"); 
                            :};

lista_parametros_neg_calc ::= parametro_neg_calc
                                {: 
                                    polaca.insertarEnPolaca("@aux");
                                    polaca.insertarEnPolaca(":=");

                                    polaca.insertarEnPolaca("@aux");
                                    polaca.insertarEnPolaca("0");
                                    polaca.insertarEnPolaca("CMP");
                                    polaca.insertarEnPolaca("BGE");                       
                                    polaca.pilaNeg.push(polaca.getIndice());
                                    polaca.insertarEnPolaca("SALTO");

                                    polaca.insertarEnPolaca("@cont");
                                    polaca.insertarEnPolaca("1");
                                    polaca.insertarEnPolaca("+");
                                    polaca.insertarEnPolaca("@cont");
                                    polaca.insertarEnPolaca(":=");
                                    
                                    polaca.insertarEnPolaca("@suma");
                                    polaca.insertarEnPolaca("@aux");
                                    polaca.insertarEnPolaca("+");
                                    polaca.insertarEnPolaca("@suma");
                                    polaca.insertarEnPolaca(":=");

                                    polaca.insertarEnPolaca("@prod");
                                    polaca.insertarEnPolaca("@aux");
                                    polaca.insertarEnPolaca("*");
                                    polaca.insertarEnPolaca("@prod");
                                    polaca.insertarEnPolaca(":=");

                                    int posSalto = polaca.pilaNeg.pop();
                                    polaca.getElementos().set(posSalto, String.valueOf(polaca.getIndice()));
                                :}
                            | lista_parametros_neg_calc COMA parametro_neg_calc
                                {: 
                                    polaca.insertarEnPolaca("@aux");
                                    polaca.insertarEnPolaca(":=");

                                    polaca.insertarEnPolaca("@aux");
                                    polaca.insertarEnPolaca("0");
                                    polaca.insertarEnPolaca("CMP");
                                    polaca.insertarEnPolaca("BGE");                       
                                    polaca.pilaNeg.push(polaca.getIndice());
                                    polaca.insertarEnPolaca("SALTO");

                                    polaca.insertarEnPolaca("@cont");
                                    polaca.insertarEnPolaca("1");
                                    polaca.insertarEnPolaca("+");
                                    polaca.insertarEnPolaca("@cont");
                                    polaca.insertarEnPolaca(":=");
                                    
                                    polaca.insertarEnPolaca("@suma");
                                    polaca.insertarEnPolaca("@aux");
                                    polaca.insertarEnPolaca("+");
                                    polaca.insertarEnPolaca("@suma");
                                    polaca.insertarEnPolaca(":=");

                                    polaca.insertarEnPolaca("@prod");
                                    polaca.insertarEnPolaca("@aux");
                                    polaca.insertarEnPolaca("*");
                                    polaca.insertarEnPolaca("@prod");
                                    polaca.insertarEnPolaca(":=");

                                    int posSalto = polaca.pilaNeg.pop();
                                    polaca.getElementos().set(posSalto, String.valueOf(polaca.getIndice()));
                                :};

parametro_neg_calc ::= ID:id
                        {: 
                            st.checkDeclared(id);
                            st.checkParamType(id, "Float");
                            polaca.insertarEnPolaca(id);
                            System.out.println("Parametro variable: " + id); 
                        :}
                     | CTE_FLOTANTE:valor
                        {: 
                            polaca.insertarEnPolaca(valor);
                            System.out.println("Parametro constante: " + valor); 
                        :};                        