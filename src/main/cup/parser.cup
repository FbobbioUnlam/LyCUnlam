package lyc.compiler;

import java_cup.runtime.*;

class Parser;

// Terminals
terminal ID;
terminal CTE_ENTERA;
terminal CTE_FLOTANTE;
terminal CTE_CADENA;

terminal OP_SUMA;
terminal OP_RESTA;
terminal OP_MULT;
terminal OP_DIV;
terminal OP_ASIG;
terminal OP_TIPO;
terminal COMP_MEN;
terminal COMP_MAY;

terminal COMA;
terminal PAR_ABRIR;
terminal PAR_CERRAR;
terminal LLAVE_ABRIR;
terminal LLAVE_CERRAR;

terminal IF;
terminal ELSE;
terminal WHILE;
terminal AND;
terminal OR;
terminal NOT;
terminal WRITE;
terminal READ;
terminal INIT;

terminal DT_FLOAT;
terminal DT_INT;
terminal DT_STRING;

terminal SLICE_AND_CONCAT;
terminal NEGATIVE_CALCULATION;

// Non Terminals
non terminal programa, lista_sentencia, sentencia;
non terminal asignacion, if, while, slice_and_concat, negative_calculation, declaracion, io;
non terminal lista_declaraciones, declaracion_simple, lista_variables, tipo_variable;
non terminal expresion, termino, factor, constante; // operaciones
non terminal condicion, expresion_logica, operador_relacional; // if - while
non terminal lista_parametros_neg_calc, parametro_neg_calc; // negative_calculation
non terminal lectura, escritura; // io

// Start Symbol Definition
start with programa;

programa ::= lista_sentencia;

lista_sentencia ::= lista_sentencia sentencia 
                    | sentencia;

sentencia ::= declaracion
            | asignacion
            | if
            | while
            | io;

declaracion ::= INIT LLAVE_ABRIR lista_declaraciones LLAVE_CERRAR
                {: System.out.println("Bloque de declaracion de variables"); :};

lista_declaraciones ::= declaracion_simple
                      | lista_declaraciones declaracion_simple;

declaracion_simple ::= lista_variables OP_TIPO tipo_variable;

lista_variables ::= lista_variables COMA ID:id
                    {: System.out.println("Declaracion anidada (,) " + id); :}
                | ID:id
                    {: System.out.println("Id: " + id); :};

tipo_variable ::= DT_FLOAT
                    {: System.out.println("Declaracion Float"); :}
                | DT_INT
                    {: System.out.println("Declaracion Int"); :}
                | DT_STRING
                    {: System.out.println("Declaracion String"); :};

asignacion ::= ID:id OP_ASIG expresion
                {: System.out.println("Id: '" + id + "' Asignacion \n"); :}
            | ID:id OP_ASIG slice_and_concat
                {: System.out.println("Id: '" + id + "' Asignacion \n"); :}
            | ID:id OP_ASIG negative_calculation
                {: System.out.println("Id: '" + id + "' Asignacion \n"); :};

expresion ::= expresion OP_SUMA termino
              {: System.out.println("Suma"); :}
            | expresion OP_RESTA termino
                {: System.out.println("Resta"); :}
            | termino
                {: System.out.println("Expresion simple"); :};

termino ::= termino OP_MULT factor
             {: System.out.println("Multiplicacion"); :}
            | termino OP_DIV factor
                {: System.out.println("Division"); :}
            | factor
                {: System.out.println("Termino simple"); :};

factor ::= constante
            | ID:id
                {: System.out.println("Id: " + id); :};

constante ::= CTE_ENTERA:entero
                {: System.out.println("Cte entera: " + entero); :}
            | CTE_FLOTANTE:flotante
                {: System.out.println("Cte flotante: " + flotante); :}
            | CTE_CADENA:cadena
                {: System.out.println("Cte cadena: " + cadena); :};

io ::= lectura
    | escritura;

lectura ::= READ PAR_ABRIR ID:id PAR_CERRAR
                {: System.out.println("Lectura de variable: " + id + "\n"); :};

escritura ::= WRITE PAR_ABRIR CTE_CADENA:cadena PAR_CERRAR
                {: System.out.println("Imprimir cadena: " + cadena); :}
            | WRITE PAR_ABRIR ID:id PAR_CERRAR
                {: System.out.println("Imprimir variable: " + id); :};

if ::= IF PAR_ABRIR condicion PAR_CERRAR LLAVE_ABRIR lista_sentencia LLAVE_CERRAR
        {: System.out.println("IF con bloque \n"); :}
    | IF PAR_ABRIR condicion PAR_CERRAR LLAVE_ABRIR lista_sentencia LLAVE_CERRAR ELSE LLAVE_ABRIR lista_sentencia LLAVE_CERRAR
        {: System.out.println("IF-ELSE con bloques \n"); :};

while ::= WHILE PAR_ABRIR condicion PAR_CERRAR LLAVE_ABRIR lista_sentencia LLAVE_CERRAR
            {: System.out.println("WHILE con condicion y bloque \n"); :};

slice_and_concat ::= SLICE_AND_CONCAT PAR_ABRIR CTE_ENTERA:param1 COMA CTE_ENTERA:param2 COMA CTE_CADENA:param3 COMA CTE_CADENA:param4 COMA CTE_ENTERA:param5 PAR_CERRAR
                        {: System.out.println("\nLlamado a sliceAndConcat " + param1 + ", " + param2 + ", " + param3 + ", " + param4 + ", " + param5); :};

negative_calculation ::= NEGATIVE_CALCULATION PAR_ABRIR lista_parametros_neg_calc PAR_CERRAR
                            {: System.out.println("Llamado a negativeCalculation con params"); :};

lista_parametros_neg_calc ::= parametro_neg_calc
                            | lista_parametros_neg_calc COMA parametro_neg_calc;

parametro_neg_calc ::= ID:id
                        {: System.out.println("Parametro variable: " + id); :}
                     | CTE_FLOTANTE:valor
                        {: System.out.println("Parametro constante: " + valor); :};

condicion ::= expresion_logica
            | NOT expresion_logica
                {: System.out.println("Condicion con NOT"); :};

expresion_logica ::= expresion operador_relacional expresion
                        {: System.out.println("Condicion simple"); :}
                  | expresion operador_relacional expresion AND expresion operador_relacional expresion
                        {: System.out.println("Condicion con AND"); :}
                  | expresion operador_relacional expresion OR expresion operador_relacional expresion
                        {: System.out.println("Condicion con OR"); :};

operador_relacional ::= COMP_MEN
                        {: System.out.println("Operador <"); :}
                    | COMP_MAY
                        {: System.out.println("Operador >"); :};
